From 050d2913f4bcd74e3d4dc4c4ac340538b907f797 Mon Sep 17 00:00:00 2001
From: Andreas Fernandez <a.fernandez@scripting-base.de>
Date: Sat, 09 Feb 2019 18:20:56 +0100
Subject: [PATCH] [POC][BUGFIX] Fix fallback language handling

This is an early approach to fix fallback language handlings in terms of:

- Resolve correct page
- Metadata of page (e.g. page title)
- Links in menu

Resolves: #XXXXX
Releases: master, 9.5
Change-Id: Ic2b302989449ec14e7e6b5c54819870770655da9
---

diff --git a/Classes/ContentObject/Menu/AbstractMenuContentObject.php b/Classes/ContentObject/Menu/AbstractMenuContentObject.php
index 63973247..cc658923 100644
--- a/Classes/ContentObject/Menu/AbstractMenuContentObject.php
+++ b/Classes/ContentObject/Menu/AbstractMenuContentObject.php
@@ -2214,7 +2214,7 @@ abstract class AbstractMenuContentObject
     protected function menuTypoLink($page, $oTarget, $no_cache, $script, $overrideArray = '', $addParams = '', $typeOverride = '')
     {
         $conf = [
-            'parameter' => is_array($overrideArray) && $overrideArray['uid'] ? $overrideArray['uid'] : $page['uid']
+            'parameter' => is_array($overrideArray) && $overrideArray['uid'] ? $overrideArray['uid'] : (!empty($page['_PAGES_OVERLAY_UID']) ? $page['_PAGES_OVERLAY_UID'] : $page['uid'])
         ];
         if (MathUtility::canBeInterpretedAsInteger($typeOverride)) {
             $conf['parameter'] .= ',' . (int)$typeOverride;
diff --git a/Classes/Controller/TypoScriptFrontendController.php b/Classes/Controller/TypoScriptFrontendController.php
index e9cdb528..7bbaa50d 100644
--- a/Classes/Controller/TypoScriptFrontendController.php
+++ b/Classes/Controller/TypoScriptFrontendController.php
@@ -2763,11 +2763,11 @@ class TypoScriptFrontendController implements LoggerAwareInterface
                         // value was found.
                         foreach ($languageAspect->getFallbackChain() ?? [] as $orderValue) {
                             if ($orderValue === '0' || $orderValue === 0 || $orderValue === '') {
-                                $languageContentId = 0;
+                                $languageId = $languageContentId = 0;
                                 break;
                             }
                             if (MathUtility::canBeInterpretedAsInteger($orderValue) && !empty($this->sys_page->getPageOverlay($this->id, (int)$orderValue))) {
-                                $languageContentId = (int)$orderValue;
+                                $languageId = $languageContentId = (int)$orderValue;
                                 break;
                             }
                             if ($orderValue === 'pageNotFound') {
@@ -2790,9 +2790,6 @@ class TypoScriptFrontendController implements LoggerAwareInterface
                         // Default is that everything defaults to the default language...
                         $languageId = ($languageContentId = 0);
                 }
-            } else {
-                // Setting sys_language if an overlay record was found (which it is only if a language is used)
-                $this->page = $this->sys_page->getPageOverlay($this->page, $languageAspect->getId());
             }

             // Define the language aspect again now
@@ -2803,6 +2800,9 @@ class TypoScriptFrontendController implements LoggerAwareInterface
                 $languageAspect->getOverlayType(),
                 $languageAspect->getFallbackChain()
             );
+
+            // Setting sys_language if an overlay record was found (which it is only if a language is used)
+            $this->page = $this->sys_page->getPageOverlay($this->page, $languageAspect->getId());
         }

         // Set the language aspect
diff --git a/Classes/Page/PageRepository.php b/Classes/Page/PageRepository.php
index e2f36b3d..d603dfc5 100644
--- a/Classes/Page/PageRepository.php
+++ b/Classes/Page/PageRepository.php
@@ -556,6 +556,9 @@ class PageRepository implements LoggerAwareInterface
         unset($origPage);
         // If language UID is different from zero, do overlay:
         if ($languageUid) {
+            $languageAspect = GeneralUtility::makeInstance(Context::class)->getAspect('language');
+            $languageUids = array_merge([$languageUid], $languageAspect->getFallbackChain());
+
             $page_ids = [];

             $origPage = reset($pagesInput);
@@ -575,36 +578,42 @@ class PageRepository implements LoggerAwareInterface
             // However you may argue that the showHiddenField flag should
             // determine this. But that's not how it's done right now.
             // Selecting overlay record:
-            $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
-                ->getQueryBuilderForTable('pages');
-            $queryBuilder->setRestrictions(GeneralUtility::makeInstance(FrontendRestrictionContainer::class));
-            $result = $queryBuilder->select('*')
-                ->from('pages')
-                ->where(
-                    $queryBuilder->expr()->in(
-                        $GLOBALS['TCA']['pages']['ctrl']['transOrigPointerField'],
-                        $queryBuilder->createNamedParameter($page_ids, Connection::PARAM_INT_ARRAY)
-                    ),
-                    $queryBuilder->expr()->eq(
-                        $GLOBALS['TCA']['pages']['ctrl']['languageField'],
-                        $queryBuilder->createNamedParameter($languageUid, \PDO::PARAM_INT)
+            foreach ($languageUids as $fallbackLanguageId) {
+                $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
+                    ->getQueryBuilderForTable('pages');
+                $queryBuilder->setRestrictions(GeneralUtility::makeInstance(FrontendRestrictionContainer::class));
+                $result = $queryBuilder->select('*')
+                    ->from('pages')
+                    ->where(
+                        $queryBuilder->expr()->in(
+                            $GLOBALS['TCA']['pages']['ctrl']['transOrigPointerField'],
+                            $queryBuilder->createNamedParameter($page_ids, Connection::PARAM_INT_ARRAY)
+                        ),
+                        $queryBuilder->expr()->eq(
+                            $GLOBALS['TCA']['pages']['ctrl']['languageField'],
+                            $queryBuilder->createNamedParameter($languageUid, \PDO::PARAM_INT)
+                        )
                     )
-                )
-                ->execute();
+                    ->execute();
+
+                $overlays = [];
+                while ($row = $result->fetch()) {
+                    $this->versionOL('pages', $row);
+                    if (is_array($row)) {
+                        $row['_PAGES_OVERLAY'] = true;
+                        $row['_PAGES_OVERLAY_UID'] = $row['uid'];
+                        $row['_PAGES_OVERLAY_LANGUAGE'] = $languageUid;
+                        $origUid = $row[$GLOBALS['TCA']['pages']['ctrl']['transOrigPointerField']];
+                        // Unset vital fields that are NOT allowed to be overlaid:
+                        unset($row['uid']);
+                        unset($row['pid']);
+                        unset($row['alias']);
+                        $overlays[$origUid] = $row;
+                    }
+                }

-            $overlays = [];
-            while ($row = $result->fetch()) {
-                $this->versionOL('pages', $row);
-                if (is_array($row)) {
-                    $row['_PAGES_OVERLAY'] = true;
-                    $row['_PAGES_OVERLAY_UID'] = $row['uid'];
-                    $row['_PAGES_OVERLAY_LANGUAGE'] = $languageUid;
-                    $origUid = $row[$GLOBALS['TCA']['pages']['ctrl']['transOrigPointerField']];
-                    // Unset vital fields that are NOT allowed to be overlaid:
-                    unset($row['uid']);
-                    unset($row['pid']);
-                    unset($row['alias']);
-                    $overlays[$origUid] = $row;
+                if ($overlays === []) {
+                    break;
                 }
             }
         }
